import { app, BrowserWindow, ipcMain } from "electron";

import { IpcInvokeChannelInterface } from "../shared/IpcChannelInterface";
import { IpcChannelInterface } from "../shared/IpcChannelInterface";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

interface MainContext {
  ipcChannels: IpcChannelInterface[],
  ipcInvokeChannels: IpcInvokeChannelInterface[]
}

class Main {
  private mainWindow: BrowserWindow;

  public init(ctx: MainContext) {
    app.on("ready", this.createWindow);
    app.on("window-all-closed", this.onWindowAllClosed);
    app.on("activate", this.onActivate);

    this.registerIpcChannels(ctx.ipcChannels);
    this.registerIpcInvokeChannels(ctx.ipcInvokeChannels);
  }

  private createWindow() {
    const mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    mainWindow.webContents.openDevTools();
  }

  private onWindowAllClosed() {
    // Quit when all windows are closed, except on macOS. There, it's common
    // for applications and their menu bar to stay active until the user quits
    // explicitly with Cmd + Q.
    if (process.platform !== "darwin") {
      app.quit();
    }
  }

  private onActivate() {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      this.createWindow();
    }
  }

  private registerIpcChannels(ipcChannels: IpcChannelInterface[]) {
    ipcChannels.forEach((channel) =>
      ipcMain.on(channel.name, (event, request) => channel.handle(event, request))
    );
  }

  private registerIpcInvokeChannels(ipcInvokeChannels: IpcInvokeChannelInterface[]) {
    ipcInvokeChannels.forEach((channel) =>
      ipcMain.handle(channel.name, (event, request) => channel.handle(event, request))
    );
  }
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

new Main().init({
  ipcChannels: [],
  ipcInvokeChannels: []
});